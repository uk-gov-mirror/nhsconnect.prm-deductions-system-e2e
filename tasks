#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
export NHS_SERVICE=system-e2e

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function get_aws_account_id {
  AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

function configure_repo_to_gp_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/repo-to-gp-authorization-keys"
  echo "${parameter_name}"
  export REPO_TO_GP_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_ehr_repo_service_auth_keys {
  parameter_name="/repo/${NHS_ENVIRONMENT}/user-input/ehr-repo-authorization-keys"
  echo "${parameter_name}"
  export EHR_REPO_AUTHORIZATION_KEYS=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region ${AWS_DEFAULT_REGION} --name  ${parameter_name} | jq -r .Parameter.Value")
}

function configure_mhs_inbound_url {
  check_env
  if [[ $NHS_ENVIRONMENT == "dev" ]]; then
    export MHS_INBOUND_URL=http://mhs-inbound-dev-opentest.mhs.patient-deductions.nhs.uk
  else
    export MHS_INBOUND_URL=http://mhs-inbound-test-b86041.mhs.patient-deductions.nhs.uk
  fi
}

function configure_mhs_outbound_test_harness_url {
  export MHS_OUTBOUND_TEST_HARNESS_URL=https://mhs-outbound-dev.test-harness-mhs.patient-deductions.nhs.uk
}

####################
# Script Functions #
####################

function get_aws_ssm_secret {
   secret_id=$1
   json=$(dojo -c Dojofile-infra "aws ssm get-parameter --with-decryption --region $AWS_DEFAULT_REGION --name $secret_id")
   if [ $? != 0 ]; then
     >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
     exit 5
   fi
   echo $json | jq -r ".Parameter.Value"
}

function send_canary_update_message {
  check_nhs_service
  node scripts/send-canary-update.js $(npm outdated --parseable)
}

function configure_hangout_webhook {
  export GOOGLE_CHAT_CANARY_WEBHOOK=$(get_aws_ssm_secret "/repo/prod/user-input/gocd-google-chat-canary-webhook")
  if [ -z "${GOOGLE_CHAT_CANARY_WEBHOOK}" ]; then
    echo "Unable to obtain GOOGLE_CHAT_CANARY_WEBHOOK from AWS"
    exit 5
  fi
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  update_package_json)
      dojo "npx npm-check-updates -u"
      ;;
  send_dead_canary_message)
      check_nhs_service
      configure_hangout_webhook
      dojo "node scripts/send-canary-error.js"
      ;;
  _dep)
      npm install
      npm audit
      ;;
  dep)
      dojo "./tasks _dep"
      ;;
  _list_outdated)
      npm install
      npm outdated > outdated-dependencies.txt || send_canary_update_message
      ;;
  list_outdated)
      configure_hangout_webhook
      dojo "./tasks _list_outdated"
      ;;
  _test_lint)
      npm install
      npm run lint
      ;;
  test_lint)
      dojo "./tasks _test_lint"
      ;;
  _test_e2e)
      npm install
      npm run test
      ;;
  test_e2e_repo)
      check_env
      get_aws_account_id
      configure_repo_to_gp_service_auth_keys
      configure_ehr_repo_service_auth_keys
      configure_mhs_inbound_url
      dojo "./tasks _test_e2e"
      ;;
  test_e2e_test_harness)
      check_env
      get_aws_account_id
      export USE_TEST_HARNESS=true
      configure_repo_to_gp_service_auth_keys
      configure_ehr_repo_service_auth_keys
      configure_mhs_outbound_test_harness_url
      dojo "./tasks _test_e2e"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e